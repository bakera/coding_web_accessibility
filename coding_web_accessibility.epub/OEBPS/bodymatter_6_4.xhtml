<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
    <head>
        <meta charset="utf-8" />
        
        <link rel="stylesheet" href="style.css" type="text/css" />

        <title>6-3 ダイアログ</title>
    </head>
    <body class="bodymatter" epub:type="bodymatter">
        <h2 id="toc_index_1">6-3 ダイアログ</h2>

<p>世界中のアクセシビリティエンジニアやアクセシビリティエバンジェリストは、ダイアログを使ったWebアプリケーションの提案にすくみ上がっています。<a href="http://www.creativebloq.com/accessibility-expert-warns-stop-using-carousels-7133778">恐怖のカルーセル</a>と同様に、ダイアログは1人ひとりのユーザーにとって使いやすいものにするためには十分な検討が必要なユーザーインターフェイスです。</p>

<blockquote>
  <p>ダイアログ：複数の人物の間で交わされる会話。また、人とほかの何か（コンピュータなど）との間で交わされる類似したやりとり。<br />
  ― <a href="http://www.merriam-webster.com/dictionary/dialogue">Merriam-Websterの定義</a></p>
</blockquote>

<p><img src="img-6-3_01.png" alt="図: 「お話があります。」というテキストと「わかりました」というボタンがあるダイアログ" /></p>

<p>カルーセルとは異なり、ダイアログはデスクトップアプリケーションおよびWebアプリケーションの設計において回避することのできない重要なパターンです。その名が表す通り、ダイアログはユーザーとアプリケーションの間で合意が得られなければそれ以上の処理が進められない局面に登場します。ダイアログは次のいずれかに属します。</p>

<ul>
<li>処理を続けるうえでユーザーが知っておくべき情報を提供する</li>
<li>分かれ道（処理を進めるうえで行うべきアクションを選択させる）</li>
</ul>

<p>ここでは、単純化するために、アクセシブルな警告ダイアログを作成するために必要な一連の技術を考察していきます。そのためには、本書でこれまでに紹介したセマンティックなHTML、ロール、プロパティ、ステートといったすべての要素を（単純化した形で）使いながら、同時にコントロールのフォーカスを巧妙に管理および提示する必要があります。</p>

<h3 id="toc_index_2">要点</h3>

<p>ダイアログは事前に用意しておく必要はなく、前述した「合意が必要な局面」になった時点で動的に構築します。こうすることで、柔軟性をもたせ、ページから余分なマークアップを排除することができます。また、ダイアログを呼び出すという行為によって支援技術がダイアログを新しいライブコンテンツとして認識し、優先的に処理するようにもなります。</p>

<p>ここで質問です。ダイアログに欠かせないパーツとはいったい何でしょうか？</p>

<p><img src="img-6-3_02.png" alt="図: コンピュータの画面と対話する人" /></p>

<p>本来の意味のダイアログ（対話）は、2つの要素で構成されます。すなわち、ある人（この場合はコンピュータ）の言い分と、それに対する相手の応答です。ダイアログパターンを再利用可能なものにするために、HTML5のカスタムデータ属性（<code>data-dialog-call</code>および<code>data-dialog-response</code>）にこれら2つの変数を格納し、ダイアログを呼び出す任意のボタンコントロールに割り当てます。<a href="http://ejohn.org/blog/html-5-data-attributes/"><code>data</code>属性</a>の利点は、プライベートなストレージとして使えることです。<code>&lt;div&gt;</code>要素と同じように、<code>data</code>属性の意味はユーザーには通知されません。ユーザーに伝わるとなると、不要なノイズを作成していることになります。</p>

<h3 id="toc_index_3">セットアップ</h3>

<p>Chapter 2「<a href="bodymatter_2_0.xhtml">ボタンのすべて</a>」で取り上げたビッグレッドボタンを覚えていますか？　警告ダイアログのトリガーとして使いましょう。いずれにしろビッグレッドボタンを押しても何も良いことはありませんし、おそらくはユーザーも（それが誰であれ）そのことに気づいていることでしょう。</p>

<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;button</span><span class="ot"> class=</span><span class="st">&quot;big-red&quot;</span><span class="ot"> data-dialog-call=</span><span class="st">&quot;できれば押さないでください&quot;</span><span class="ot"> data-dialog-response=</span><span class="st">&quot;わかりました&quot;</span><span class="kw">&gt;</span>ビッグレッドボタン<span class="kw">&lt;/button&gt;</span></code></pre></div>

<h3 id="toc_index_4"><span class="sideways">＜</span>dialog<span class="sideways">＞</span>要素</h3>

<p>すぐにわかることですが、アクセシブルなWebベースのダイアログを作ることは、簡単ではありません。注意すべきことも、失敗しやすいポイントも数多くあります。そのようなダイアログを作るための使いやすいプログラミングインターフェイスの仕様が現在策定されている理由もそこにあります。</p>

<p><code>&lt;dialog&gt;</code>とこの要素に関連する属性とメソッドを使ってダイアログを標準仕様に準拠させることは、<a href="http://blog.teamtreehouse.com/a-preview-of-the-new-dialog-element">試用版のChrome CanaryブラウザおよびChrome（バージョン25以降）ですでに可能となっています</a>。試用版のWebプラットフォームの機能を有効にすれば、<code>HTMLDialogElement</code>インターフェイスの一部として以下のメソッドを利用できます。</p>

<ul>
<li><code>show()</code>：基本的なダイアログを表示します。</li>
<li><code>showModal()</code>：警告に似たダイアログを表示し、ユーザーがページ上のほかの要素とのインタラクションを行えないようにします。</li>
<li><code>close()</code>：ダイアログをきちんと閉じるためのメソッドです。</li>
</ul>

<p>標準化が明確になるにつれて、ダイアログの作り方について考え直す必要はなくなるはずです。ただし、これはまだ実際の環境で使用できるインターフェイスではなく、ユーザーの動作を実際にどのように処理するかについては、<a href="http://lists.w3.org/Archives/Public/public-html-bugzilla/2013Sep/0357.html">まだ盛んに議論</a>されている段階です。</p>

<p>さしあたり、少なくとも<a href="https://github.com/aFarkas/html5shiv/blob/master/src/html5shiv.js">HTML5 shiv</a>を介して、既知の要素として<code>&lt;dialog&gt;</code>要素を使ってダイアログを登録することはできます。さらに、CSSを適用することによって<code>open</code>属性をシミュレーションすることができます。次のスクリプトでは、<code>open</code>属性によって表示、非表示を直接切り替えています。</p>

<div class="sourceCode"><pre class="sourceCode css"><code class="sourceCode css">dialog <span class="kw">{</span>
    <span class="kw">display:</span> <span class="dt">none</span><span class="kw">;</span>
<span class="kw">}</span>
dialog<span class="at">[open]</span> <span class="kw">{</span>
    <span class="kw">display:</span> <span class="dt">block</span><span class="kw">;</span>
<span class="kw">}</span></code></pre></div>

<h4 id="toc_index_5">ダイアログの構築</h4>

<p>すでに説明した通り、ここではひとり立ちの途中にある<code>&lt;dialog&gt;</code>要素を使って、動的にダイアログを構築します。トリガーの<code>click</code>関数と同時にスクリプトが実行されると、<code>&lt;dialog&gt;</code>は以下のように拡張されます。</p>

<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;dialog</span><span class="ot"> tabindex=</span><span class="st">&quot;0&quot;</span><span class="ot"> open role=</span><span class="st">&quot;alertdialog&quot;</span><span class="ot"> aria-describedby=</span><span class="st">&quot;d-message&quot;</span><span class="kw">&gt;</span>
    <span class="kw">&lt;div&gt;</span>
        <span class="kw">&lt;div&gt;</span>
            <span class="kw">&lt;p</span><span class="ot"> id=</span><span class="st">&quot;d-message&quot;</span><span class="kw">&gt;</span>できれば押さないでください<span class="kw">&lt;/p&gt;</span>
            <span class="kw">&lt;button&gt;</span>わかりました<span class="kw">&lt;/button&gt;</span>
        <span class="kw">&lt;/div&gt;</span>
    <span class="kw">&lt;/div&gt;</span>
<span class="kw">&lt;/dialog&gt;</span></code></pre></div>

<ul>
<li><code>role="alertdialog"</code>ネイティブの<code>&lt;dialog&gt;</code>セマンティクスを上書きし、警告またはエラー用のダイアログとして定義します。標準ダイアログは単に<code>dialog</code>ロールを担います。<a href="http://www.w3.org/TR/wai-aria-practices/#chobet"><code>alertdialog</code>ロールは<code>alert</code>に関連づけられた特殊なライブリージョン</a>です。</li>
<li><code>open</code>は、ダイアログが開かれているかどうかを示す単純なブール型属性です。</li>
<li><code>tabindex="0"</code>を設定すると、<code>&lt;dialog&gt;</code>にフォーカスできます。ダイアログが表示された時点ではフォーカスは閉じるボタンにありますが、ダイアログ自体にフォーカスできるようにすることで、ユーザーはメッセージと閉じるボタンを切り替えて、必要に応じて繰り返し読むことができます。</li>
<li><code>aria-describedby="d-message"</code>は、ダイアログのメッセージとダイアログを関連づけて、<code>&lt;dialog&gt;</code>がフォーカスされるたびにメッセージが読まれるようにします。</li>
</ul>

<p><img src="img-6-3_03.png" alt="図: スクリーンリーダーに「ダイアログ、できれば押さないでください、わかりました、ボタン」と読み上げられるダイアログ" /></p>

<p>フリーのNVDAスクリーンリーダーを使ってこのダイアログを開くと、「ダイアログ、できれば押さないでください、わかりました、ボタン」と読み上げられます。</p>

<p>つまり、ダイアログが表示された理由と意図、および最後に承諾するという唯一の選択肢がアナウンスされます。もちろん、選択肢が1つしかないダイアログばかりではありませんが、ここではできるだけ単純化しておきましょう。</p>

<h3 id="toc_index_6">フォーカスの難問</h3>

<p>繰り返しになりますが、ユーザーのフォーカスを管理することは、アクセシブルなアプリケーション設計において最も難しく、重要な側面のひとつです。モーダルダイアログの場合はなおさらです。</p>

<p>以下の3つのポイントに注意する必要があります。</p>

<ol>
<li>モーダルダイアログが開いている間は、ユーザーはその他の要素とインタラクションを行うことはできない。</li>
<li>ユーザーのフォーカスをダイアログの中に閉じ込めてはならない。ブラウザのアドレスバーやページ外部のその他のコントロールに、ユーザーがフォーカスを移動できるようにしなくてはならない。</li>
<li>ダイアログを呼び出した要素がある場合は、ダイアログを閉じるときにその要素にフォーカスを戻し、ユーザーが元の操作を続行できるようにしなくてはならない。</li>
</ol>

<p>上記すべてに関わるちょっとした難問は、ダイアログを除いたページ上のすべてのコンテンツはフォーカス可能なようにできていることです。まず、フォーカスの対象となりうる要素の種類をすべて挙げてみましょう。CSSセレクタとして書くと、次のようになります。</p>

<ul>
<li><code>a[href]</code></li>
<li><code>button:not([disabled])</code></li>
<li><code>[tabindex]:not([tabindex="-1"])</code></li>
</ul>

<p>このほかに、すべてのフォーム関連要素も含まれます。</p>

<p>ノースカロライナ州立大学のブログ記事「<a href="http://accessibility.oit.ncsu.edu/blog/2013/09/13/the-incredible-accessible-modal-dialog/">The Incredible Accessible Modal Dialog</a>（とてつもなくアクセシブルなモーダルダイアログ）」では、Greg Krauss（グレッグ・クラウス）がこれらのすべての要素を識別し、フォーカスできないものとして表示し、ダイアログが閉じられたときには再び元の状態に戻せるようにそれぞれをメモリ内に格納する方法を説明しています。</p>

<div class="notice">

<dl>
<dt>訳注</dt>
<dd>上記のブログ記事は2017年3月時点でリンク切れとなっています。モーダルダイアログのコードは<a href="https://github.com/gdkraus/accessible-modal-dialog">The Incredible Accessible Modal Window</a>としてGitHub上で公開されています。</dd>
</dl>

</div>

<p>このままではあまり効率が良くないので、それぞれの要素にマーカーとなる属性を追加しておき、このマーカーと一致する要素だけをフォーカス可能に戻すほうが良いでしょう。</p>

<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;a</span><span class="ot"> href=</span><span class="st">&quot;http://www.google.com&quot;</span><span class="ot"> tabindex=</span><span class="st">&quot;-1&quot;</span><span class="ot"> datamodal-unfocused</span><span class="kw">&gt;&lt;/a&gt;</span></code></pre></div>

<p>さらに面倒なことに、これらの要素がスクリーンリーダーでも読まれないようにする必要がある、ということに注意する必要があります。つまり、スクリーンリーダーに対して隠しておかない限り、ユーザーはダイアログを抜け出してページ内の他のコンテンツを読み続けることができてしまいます。</p>

<p>ほとんどの最新のスクリーンリーダーに対しては、<code>aria-hidden</code>ステートを使ってページのコンテンツを隠すことができるので、ここではダイアログ以外のすべてのコンテンツに<code>aria-hidden="true"</code>を設定します。</p>

<p>ただしそれだけでは、残念ながらキーボードを使って要素にフォーカスすることはできてしまうので、キーボードによるフォーカスについては別途コントロールする必要があります。作業量が多くなりそうですね。もっと簡単な方法はないでしょうか？</p>

<h4 id="toc_index_7">visibility:hiddenを使った方法</h4>

<p>本書ではこれまでに、スクリーンリーダーが特定のCSSスタイルをいかに巧みに（巧みすぎる場合もあります）理解するかを取り上げてきました。<code>display:none</code>または<code>visibility:hidden</code>を使って隠した要素が、表示からも読み出しからも同じように隠される仕組みを説明しました。</p>

<p><code>visibility:hidden</code>または<code>display:none</code>を使って隠した要素はフォーカスできず、キーボードによるナビゲーションもできなくなります。私たちのするべきことは、ページのコンテンツの中でダイアログに含まれていないものを見分け、<code>visibility:hidden</code>を設定した<code>class</code>属性をつけることです（<code>display: none</code>ではなく<code>visibility:hidden</code>を使うのは、要素の配置を保持するためです。何ひとつ動かしてはなりません）。</p>

<p>以下のjQueryのワンライナーは、<code>&lt;dialog&gt;</code>の兄弟にあたるすべての要素に<code>mod-hidden</code>クラスを追加し、それらの子孫も含めて丸ごと隠します。これが機能するためには、<code>&lt;dialog&gt;</code>が<code>&lt;body&gt;</code>の直接の子要素になっている必要があります。そのようにマークアップしておきましょう。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="at">$</span>(<span class="st">&#39;body &gt; *:not(dialog)&#39;</span>).<span class="at">addClass</span>(<span class="st">&#39;mod-hidden&#39;</span>)<span class="op">;</span></code></pre></div>

<p><img src="img-6-3_04.png" alt="図: 上記セレクタによって、ダイアログの兄弟要素およびその子孫要素を不可視にしてフォーカスできないようにする" /></p>

<h4 id="toc_index_8">わなを仕掛けろ！</h4>

<p>ユーザーが気づかないうちにダイアログから抜けだして、ページのほかの部分とのインタラクションを行わないように、ダイアログ内のフォーカス可能な最後の要素で<kbd>Tab</kbd>キーが押されたときにはダイアログ自体にフォーカスが戻るようにします。具体的には、閉じるボタンの<code>keydown</code>ハンドラーを上書きします。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="va">close</span>.<span class="at">on</span>(<span class="st">&#39;keydown&#39;</span><span class="op">,</span> <span class="kw">function</span>(e) <span class="op">{</span>
    <span class="cf">if</span> ((<span class="va">e</span>.<span class="at">keyCode</span> <span class="op">||</span> <span class="va">e</span>.<span class="at">which</span>) <span class="op">==</span> <span class="dv">9</span>) <span class="op">{</span>
        <span class="va">dialog</span>.<span class="at">focus</span>()<span class="op">;</span>
        <span class="va">e</span>.<span class="at">preventDefault</span>()<span class="op">;</span>
    <span class="op">}</span>
<span class="op">}</span>)<span class="op">;</span></code></pre></div>

<p>実装次第では、ダイアログ要素で<kbd>Shift + Tab</kbd>キーを押すと閉じるボタン（またはダイアログ内のフォーカス可能な最後の要素）にフォーカスが戻ることでしょう。ただ、このフォーカスループを作成することによってユーザーはダイアログから出ることができなくなるので、ページを離れること自体も難しくなります。</p>

<p>次の例では、<kbd>Shift + Tab</kbd>キーを押すとブラウザのアドレスバーに移動できるようにして、逃げ道を与えます。</p>

<p><img src="img-6-3_05.png" alt="図: ダイアログからアドレスバーまでのルートを示す矢印" /></p>

<h3 id="toc_index_9">クローズ関数</h3>

<p>「わかりました」ボタンは、<code>closeDialog()</code>などの関数を実行して、ダイアログを閉じ、生成したすべてのマークアップを削除します。<kbd>Esc</kbd>キーを押した場合にも同じ結果になるようにすべきです。この機能は、<a href="http://www.w3.org/WAI/PF/aria-practices/#dialog_modal">「ARIAプラクティス」においてダイアログに実装するべきだとされています</a>。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="at">$</span>(dialog).<span class="at">on</span>(<span class="st">&#39;keypress.escape&#39;</span><span class="op">,</span> <span class="kw">function</span>(e) <span class="op">{</span>
    <span class="cf">if</span> (<span class="va">e</span>.<span class="at">keyCode</span> <span class="op">==</span> <span class="dv">27</span>) <span class="op">{</span>
        <span class="at">closeDialog</span>()<span class="op">;</span>
    <span class="op">}</span>
<span class="op">}</span>)<span class="op">;</span></code></pre></div>

<p>ダイアログを閉じるためには<code>open</code>属性を単に取り除けば良いのですが、<code>&lt;dialog&gt;</code>を今後起動するダイアログのシンプルなプレースホルダーにしなくてはならないため、その他の属性もすべて必ず取り除きます。</p>

<p>そして重要なのは、ダイアログが最初に開いたときにフォーカスされていた要素にフォーカスを戻すことです。トリガー要素の<code>id</code>を使って、その要素を識別します（もし<code>id</code>がなければ、テンポラリの<code>id</code>を作成して付与します）。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="kw">var</span> trigger <span class="op">=</span> <span class="at">$</span>(<span class="kw">this</span>).<span class="at">attr</span>(<span class="st">&#39;id&#39;</span>) <span class="op">?</span> <span class="at">$</span>(<span class="kw">this</span>).<span class="at">attr</span>(<span class="st">&#39;id&#39;</span>) : <span class="st">&#39;origin&#39;</span><span class="op">;</span></code></pre></div>

<div class="notice">

<dl>
<dt>訳注</dt>
<dd>トリガーとなる要素にidがなかったときには、上記の処理に加え、要素にテンポラリな<code>id</code>（上記コードでは'<code>origin</code>'）をつける処理も必要です。</dd>
</dl>

</div>

<p>そして、ダイアログを閉じるプロセスの最後で、フォーカスをこの要素に戻します。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="at">$</span>(<span class="st">&#39;#&#39;</span> <span class="op">+</span> trigger).<span class="at">focus</span>()<span class="op">;</span></code></pre></div>

<p>この方法には、スクリーンリーダーユーザーとキーボードユーザーに影響する2つのメリットがあります。</p>

<p>1つは、ビッグレッドボタンのフォーカススタイルを復活させることで、フォーカスの存在を確認でき、フォーカスがビューポートの外部に移動していた場合でも元の位置に戻せることです。2つめは、フォーカスが戻ったことがコンテクスト内でアナウンスされることです。</p>

<p><a href="http://heydonworks.com/practical_aria_examples/#warning-dialog">このダイアログサンプルのデモページ</a>では、ページのタイトルがアナウンスされ、続いてランドマーク位置（メイン）、さらにボタンテキストがアナウンスされます。短いセンテンスの中で、ユーザーは自身の位置を割り出すことができます。</p>

<p><img src="img-6-3_06.png" alt="図: スクリーンリーダーに「ダイアログのデモページ、メインランドマーク、ビッグレッドボタン、ボタン」と読み上げられるボタン" /></p>

<p>警告は表示されましたね？　ボタンを押さないようにしましょう。</p>

<p>それにしても、いったいぜんたい、どういう理由でこんな大きな赤いボタンを作ったんでしょうね。</p>

    </body>
</html>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
    <head>
        <meta charset="utf-8" />
        
        <link rel="stylesheet" href="style.css" type="text/css" />

        <title>Chapter 5 いないいないばあ</title>
    </head>
    <body class="bodymatter" epub:type="bodymatter">
        <blockquote>
  <p>いないいないばあ（名詞）顔や体を隠し「いないいないばあ！」と言いながら再び見せることを繰り返すことで乳幼児を喜ばせる遊び<br />
  ̶ <a href="http://www.merriam-webster.com/dictionary/peekaboo">Merriam-Websterの定義</a></p>
</blockquote>

<p>JavaScriptで動くWebインターフェイスにおいて最もよく見かけるインタラクションのスタイルは、何かを表示したり、隠したりする動作に基づいています。まさに、いないいないばあですね。個々のデザインや動き、表示のされかた、その他もろもろの細かい差異を除けば、以下のどれかに当てはまります。</p>

<ul>
<li>何かが現れる。</li>
<li>何かが複数現れる。</li>
<li>何かが現れると同時に何かが見えなくなる。</li>
</ul>

<p>いくつか例を挙げてみましょう。</p>

<ul>
<li>サイトのナビゲーションが現れる「いないいないばあ！」</li>
<li>ドロップダウンサブメニューが現れる「いないいないばあ！」</li>
<li>用語の定義を展開する「いないいないばあ！」</li>
<li>タブインターフェイスのタブを切り替える「いないいないばあ！」</li>
<li>アコーディオンメニューの項目を選択する「いないいないばあ！」</li>
<li>フォーム処理の次のステップへ「いないいないばあ！」</li>
<li>ツールチップがフェードインする「いないいないばあ！」</li>
<li>警告メッセージが現れる「いないいないばあ！」</li>
<li>ダイアログが開く「いないいないばあ！」</li>
</ul>

<p>JavaScriptがもたらすいわゆる「リッチインタラクション」の多くが子どもを喜ばせる遊びに似ているというのは、悪いことではありません。何よりも、インターフェイスデザイナーとしてうぬぼれてはいけないという気持ちにさせてくれます。</p>

<p>さらに重要なのは、このメカニズムが共通しているおかげで、再利用可能でアクセシブルなコンポーネントのセットが作りやすくなっているということです。</p>

<p>帽子を使った手品は、その素材がシルクであってもフェルトであっても、帽子の手品であることに変わりはありません。アクセシブルなインターフェイスデザインでも同じことが言えます。コンテンツがスライドしようが、フェードしようが、大きくなろうが、重要なことはコンテンツが（白いウサギのように）はっきりと観客に見えるかどうかです。</p>

<p><img src="img-5_01.png" alt="図: 逆さの黒いシルクハット、シュレーディンガーのウサギ" /></p>

<p>WAIのARIA仕様では、典型的なインターフェイスコンポーネントをシンプルに保つことが重要であると認めながら、基本的なロール、ステート、プロパティ、関係する要素とのリレーションシップを定義する属性も提供しています。見かけ上の動作と実際の動作とが食い違うことになると思われるかもしれませんが、論理的な使い方をすれば、そのようなことは起こりません。</p>

<p>実際、これから見ていくように、ARIA属性をCSSおよびjQueryセレクタとして扱うことで、より再利用しやすく<a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>（Don’t Repeat Yourself： 重複の回避）なコードを書くことができ、手間を省きながらアクセシビリティを実現することが期待できるでしょう。</p>

    </body>
</html>
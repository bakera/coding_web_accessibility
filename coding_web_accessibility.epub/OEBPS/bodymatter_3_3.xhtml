<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
    <head>
        <meta charset="utf-8" />
        
        <link rel="stylesheet" href="style.css" type="text/css" />

        <title>3-2 ロールプレイング</title>
    </head>
    <body class="bodymatter" epub:type="bodymatter">
        <h2 id="toc_index_1">3-2 ロールプレイング</h2>

<p>私の友達や同僚の多くが、テーブルトークロールプレイングゲームに夢中になっています。知らない方のために説明すると、これはプレイヤーが架空のキャラクターを演じ、ファンタジーの世界で冒険の旅に出たり戦闘を繰り広げたりするゲームです。</p>

<p>あくまで私自身は、ゲームにのめり込んだりしていないのですが、ゲーム中でキャラクターが役割（ロール）を演じるその性質が、HTML要素のWebアプリケーションにおける振る舞いと似ていることに気がつきました。そこで、ARIAの<strong>ロール</strong>、<strong>プロパティ</strong>、<strong>ステート</strong>について、このロールプレイングに例えて詳しく説明していくことにします。</p>

<p>ロールプレイングゲームについて詳しくなくても大丈夫ですから、心配はいりません。私も詳しくなんてありませんから！</p>

<h3 id="toc_index_2">ロール</h3>

<p>ロールプレイングゲームでは通常、各プレイヤーが「キャラクターシート」をもっています。このシートには、プレイヤーが演じるキャラクターの重要な特性がリストアップされます。HTMLで言うと、キャラクターの名前は要素の<code>id</code>に該当します。それぞれが一意でなくてはなりません。</p>

<p><img src="img-3-2_01.png" alt="図: Heydon The Horribleという名前をIDとしたキャラクターシート" /></p>

<p>ただし、キャラクターシートにはそれ以上の情報もたくさんあります。たとえば、こうしたファンタジーの世界の住人であるキャラクターは、何らかの「種族」に属しているのが普通です。一般的によく登場するのが、エルフ、ドワーフ、トロールなどの種族です。これらは共通の特性でプレイヤーを大まかにグループ化するという点で、HTMLの要素のタイプに似ています。</p>

<p>ARIAでは、<code>role</code>属性が要素のタイプよりも優先されます。ロールプレイングゲームのプレイヤーが、21世紀の人間という日常生活を忘れて、強靭なドワーフになるのと同じです。先ほどの例では、特徴のない<code>&lt;div&gt;</code>が<code>role="checkbox"</code>をもつことで、チェックボックスの役割を担いました。</p>

<p><img src="img-3-2_02.png" alt="図: 人がふたりいる。左の人は何も装備しておらず、&lt;div&gt;というキャプションがついている。右の人はドワーフの戦士の装いで、&lt;div role=&quot;dwarf&quot;&gt;というキャプションがついている" /></p>

<p><a href="http://www.w3.org/TR/wai-aria/roles">ARIAのロール</a>は、ロールプレイングゲームの種族のように、皆が興味を抱くキャラクターの個性の一部です。ドワーフには力が強くて機械を作るのが上手であることが期待されるのと同じく、<code>&lt;button&gt;</code>には、すでに述べたような特徴や動作が期待されます。<code>role="button"</code>を実際には<code>&lt;button&gt;</code>ではない要素に指定すると、支援技術にこれをボタンとして認識させ、これらの特性を再現させることができます。</p>

<h3 id="toc_index_3">プロパティ</h3>

<p>名前と種族だけのキャラクターシートでは、できることに限りがあります。種族にばかり注目していても、ゲームは面白くならないでしょう。ARIA全体としてのポイントは、ARIAが汎用的な分類や、さらに細かい分類をするためのものではないということです。キャラクターも要素も、それぞれの強みや能力で特定したほうがはるかに良いでしょう。</p>

<p>通常、キャラクターシートには、キャラクターの一連の特徴がリストアップされます。これらはゲーム中、何らかの折に、お金をいくらもっているのか、重要な能力があるか、といったことを判定するために使われます。たとえば、あなたはエルフであると同時に、魔法の呪文を唱えられるという特別な能力をもっているかもしれません。これとまったく同じように、先ほど例示した<code>&lt;a&gt;</code>要素は、サブメニューを隠しもっているという特別なプロパティを持っていました。<code>aria-haspopup="true"</code>属性によって、基本のロールとともに、サブメニューをもっているという情報もアクセシビリティレイヤーに反映されます。</p>

<p><img src="img-3-2_03.png" alt="図: aria-hasSwordプロパティに応じて、剣を装備しているドワーフの人形。&lt;div role=&quot;dwarf&quot; aria-hasSword=&quot;true&quot;&gt;というキャプションがついている" /></p>

<div class="notice">

<dl>
<dt>訳注</dt>
<dd>アクセシビリティレイヤーとは、アクセシビリティAPIから参照されるAccessible objectが属しているレイヤーを指しているものと思われます。"<a href="http://www.w3.org/WAI/PF/aria-implementation/#intro_treetypes">WAI-ARIA1.0 User Agent Implementation Guide</a>" では、これを"accessibility tree"と呼んでいます。</dd>
</dl>

</div>

<p>ARIAには<a href="http://www.w3.org/TR/wai-aria/states_and_properties">非常に多数のプロパティ</a>が規定され、ドキュメント化されています。プロパティの中にはグローバルなものがあり、どんな要素もそのプロパティをもつことができます。</p>

<p>また、特定のコンテキストや要素のために予約されているプロパティもあります。通常、長弓を正確に射る能力はエルフに共通の特性であり、ドワーフに与えられることはありません。前の章でボタンにラベルをつけるのに使用した<code>aria-label</code>はグローバルなものですが、入力必須であることを示す<code>aria-required</code>は、通常はフォームフィールドか、もしくは<code>listbox</code>や<code>textbox</code>といったフォームフィールドのロールをもった要素にのみ使用すべきです。</p>

<h3 id="toc_index_4">ステート</h3>

<p>動きのないWebドキュメントとWebアプリケーションの最も重要な違いは、アプリケーションではユーザーインタラクションや時限イベントによって要素が（時には大幅に）変化するという点でしょう。その時点でアプリケーションで行われている処理に応じて、要素は特定の状態、多くの場合は一時的な状態にあるということができます。</p>

<p>ロールプレイングゲームでは、プレイヤーがキャラクターの状態に目を光らせている必要があります。健康状態はどうか？　どんなアイテムを集めたのか？　誰と仲間になったのか？　こうしたことをすべてキャラクターシートに書き留めては消し、さらに書き留めていきます。インタラクティブな要素の状態を追跡することは、アクセシビリティにとっても重要です。</p>

<p>アプリケーションでは、要素の状態はしばしば視覚的に表現されます。ロールプレイングゲームやスクリーンリーダーでは、想像するしかないのでしょうか？　そんなことはありません。ドワーフが魔法の透明マントを身につけたら、覚えていられるようにキャラクターシートに書き留めておくのが一番でしょう。同様に、要素に<a href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-hidden"><code>aria-hidden</code>属性</a>を指定することで、目に見えないというステートを正しく記録することができます。</p>

<p><img src="img-3-2_04.png" alt="図: aria-hiddenのように、aria-cloakedという属性によって見えない状態になったドワーフ。&lt;div role=&quot;dwarf&quot; aria-hasSword=&quot;true&quot; aria-cloaked=&quot;true&quot;&gt;というキャプションがついている" /></p>

<p>Chapter 5「<a href="bodymatter_5_0.xhtml">いないいないばあ</a>」で折りたたみ可能なコンテンツを構築するときに登場する<a href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-expanded"><code>aria-expanded</code></a>などのステートは、trueまたはfalseの値に従って読み上げられます。Windows向けスクリーンリーダーであるJAWSおよびNVDAでは、<code>aria-expanded="false"</code>をもつ項目は「折りたたみ」と読み上げられ、<code>aria-expanded="true"</code>に設定されている場合は「展開」と読み上げられます。</p>

    </body>
</html>
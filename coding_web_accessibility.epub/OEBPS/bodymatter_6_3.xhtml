<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>

<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="ja" lang="ja">
    <head>
        <meta charset="utf-8" />
        
        <link rel="stylesheet" href="style.css" type="text/css" />

        <title>6-2 全体像を見せる</title>
    </head>
    <body class="bodymatter" epub:type="bodymatter">
        <h2 id="toc_index_1">6-2 全体像を見せる</h2>

<blockquote>
  <p>コンテクストがなかったら、私はよほど奇妙に見えるだろう<br />
  ̶ Ani DiFranco（アーニー・ディフランコ）「Fire Door」より</p>
</blockquote>

<p><img src="img-6-2_01.png" alt="図: HTMLの断片でいっぱいのトレイ" /></p>

<p>デフォルトでは、ライブリージョンのコンテンツが変更された場合は、実際に変更されるノード（ここではHTMLの要素）だけがアナウンスされます。</p>

<p>ごくわずかな変更である場合に大量のコンテンツを読み直す必要はないので、このような動作は合理的です。すべてが一度に読み出されるとしたら、どこが変更されたのかをどのようにして知ることができますか？　それは、トレイに載っている物を記憶しておいて、なくなった物を言い当てる記憶ゲームのようなものかもしれません。</p>

<p>しかし、場合によっては、若干のコンテクストがあったほうが解明しやすいこともあります。そんな時に使うのが<code>aria-atomic</code>属性です。</p>

<p><code>aria-atomic</code>を設定しない場合や<code>aria-atomic</code>を<code>false</code>に設定した場合は、実際に変更された要素だけがユーザーに通知されます。<code>aria-atomic</code>を<code>true</code>に設定した場合は、<code>aria-atomic</code>が設定されている要素の全コンテンツが読み出されます。</p>

<p><code>atomic</code>という言葉に惑わされないようにしてください。<code>true</code>に設定すると、この要素のコンテンツは1つの不可分な物質（単一の原子）として扱われます。小さな破片（複数の原子）に分解されるのではありません。原子を指す<code>atomic</code>という言葉がふさわしいと思うかどうかはさておき、期待される動作が重要です。ここでの定義は前者（単一の原子として扱う）です。</p>

<p><img src="img-6-2_02.png" alt="図: 「複数の原子に分かれる」ではなく、「単一の原子」ととらえる" /></p>

<p>Gez Lemon（ゲズ・レモン）が<a href="http://juicystudio.com/article/wai-aria_live-regions_updated.php"><code>aria-atomic</code>のすばらしいサンプル</a>を提供してくれています。このサンプルでは、現在再生されている曲の曲名が表示されるミュージックプレイヤーが埋め込まれています。</p>

<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> aria-live=</span><span class="st">&quot;polite&quot;</span><span class="ot"> role=</span><span class="st">&quot;status&quot;</span><span class="ot"> aria-atomic=</span><span class="st">&quot;true&quot;</span><span class="kw">&gt;</span>
    <span class="kw">&lt;h3&gt;</span>現在再生中：&lt;/h3&gt;
    <span class="kw">&lt;p&gt;</span>Jake Bugg - Lightning Bolt<span class="kw">&lt;/p&gt;</span>
<span class="kw">&lt;/div&gt;</span></code></pre></div>

<p>変更されるのはアーティスト名と曲名のみですが、<code>aria-atomic</code>が<code>true</code>に設定されているので、リージョン全体（「現在再生中：Jake Bugg - Lightning Bolt」）が毎回読み出されます。コンテクスト上、「現在再生中」という表示は重要です。</p>

<p>ライブリージョンのポライトネス設定は<code>polite</code>であり、<strong>test.css</strong>で例示した<code>assertive</code>ではないことに注意してください。ユーザーがほかの何かを読んでいたりキー入力を行っていたりする場合には、ユーザーがその動作を止めるまで通知を待機します。ユーザーの操作を妨げるほどの重要性はありません。ユーザー自身のプレイリストであり、おそらくすべての曲の曲名を知っているはずだからです。</p>

<p><img src="img-6-2_03.png" alt="図: グラフィックイコライザーと共に、現在再生中 Jake bugg - Lightning bolt と表示されているボックス" /></p>

<p>Gez Lemonのサンプルにあるように、<code>aria-atomic</code>属性を使用する要素はライブリージョンを定義しているものと同一である必要はありません。たとえば、同一リージョン内の個別の子要素で<code>aria-atomic</code>を使うこともできます。仕様では以下のようになっています。</p>

<blockquote>
  <p>ライブリージョンのコンテンツが変更されたとき、ユーザーエージェントは変更された要素の祖先を辿って<code>aria-atomic</code>が最初に設定された要素を探し出し、適切な動作を適用しなくてはなりません。<br />
  ̶ <a href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-atomic">Supported States and Properties（サポートされるステートおよびプロパティ）</a></p>
</blockquote>

<p>ライブリージョン内にもう1ブロックを追加すれば、次の曲を表示することもできます。</p>

<div class="sourceCode"><pre class="sourceCode html"><code class="sourceCode html"><span class="kw">&lt;div</span><span class="ot"> aria-live=</span><span class="st">&quot;polite&quot;</span><span class="ot"> role=</span><span class="st">&quot;status&quot;</span><span class="kw">&gt;</span>

    <span class="kw">&lt;div</span><span class="ot"> aria-atomic=</span><span class="st">&quot;true&quot;</span><span class="kw">&gt;</span>
        <span class="kw">&lt;h3&gt;</span>現在再生中：&lt;/h3&gt;
        <span class="kw">&lt;p&gt;</span>Jake Bugg - Lightning Bolt<span class="kw">&lt;/p&gt;</span>
    <span class="kw">&lt;/div&gt;</span>

    <span class="kw">&lt;div</span><span class="ot"> aria-atomic=</span><span class="st">&quot;true&quot;</span><span class="kw">&gt;</span>
        <span class="kw">&lt;h3&gt;</span>次の曲：&lt;/h3&gt;
        <span class="kw">&lt;p&gt;</span>Napalm Death - You Suffer<span class="kw">&lt;/p&gt;</span>
    <span class="kw">&lt;/div&gt;</span>

<span class="kw">&lt;/div&gt;</span></code></pre></div>

<p>さて、Jake Bugg（ジェイク・バグ）の「Lightning Bolt」が終わりに近づいたら、「次の曲：」ブロックの<code>&lt;p&gt;</code>を「次の曲：Napalm Death ̶ You Suffer」に変更し、Napalm Death（ナパーム・デス）の出番であることをユーザーに知らせます。Napalm Deathの演奏が始まったら「現在再生中：」ブロックのクレジットを変更して、次にユーザーからの視線を受けた時に、聞こえてくるノイズがNapalm Deathによるものだということをユーザーに思い出させます。</p>

<h3 id="toc_index_2">aria-busy</h3>

<p>Napalm Deathの「You Suffer」を例にしたのはちょっとした冗談です（笑）。この曲は世界で一番短い曲（1.316秒）として認定されており、ライブリージョンが曲名を告げる前に終わってしまいます。すべての曲がこれほど短いとすると、アプリケーションは大忙しですね。</p>

<p>ライブリージョンに対する複雑な変更が数多く行われ、ユーザーが結果を理解する前に次の変更が行われてしまうような場合は、<a href="http://www.w3.org/TR/wai-aria/states_and_properties#aria-busy"><code>aria-busy</code>属性</a>を使用します。この属性は、ライブリージョンの更新によってビジーである間は<code>true</code>に設定され、更新が終わると<code>false</code>に戻ります。JavaScriptアプリケーションでアセットのロード中にスピナーが表示されるのと同じようなものです。</p>

<p><img src="img-6-2_04.png" alt="図: aria-busy=&quot;true&quot; とラベル付けされた、典型的なロード中スピナー表示" /></p>

<p>通常はライブリージョンの最初の要素（または追加要素）がロードまたは変更される前に<code>aria-busy="true"</code>を設定し、最後の要素まで終わったときに<code>false</code>に戻します。ミュージックプレイヤーの例で言うと、10秒ほどのタイムアウトを設定して、曲のアナウンスにかかる時間よりも再生時間が長いトラックだけがアナウンスされるようにします。</p>

<div class="sourceCode"><pre class="sourceCode javascript"><code class="sourceCode javascript"><span class="at">$</span>(<span class="st">&#39;#music-info&#39;</span>).<span class="at">attr</span>(<span class="st">&#39;aria-busy&#39;</span><span class="op">,</span> <span class="st">&#39;true&#39;</span>)<span class="op">;</span>

<span class="co">// ここでアーティスト名と曲名を更新し…</span>

<span class="at">setTimeout</span>(<span class="kw">function</span>() <span class="op">{</span>
    <span class="at">$</span>(<span class="st">&#39;#music-info&#39;</span>).<span class="at">attr</span>(<span class="st">&#39;aria-busy&#39;</span><span class="op">,</span> <span class="st">&#39;false&#39;</span>)<span class="op">;</span>
<span class="op">},</span> <span class="dv">10000</span>)<span class="op">;</span></code></pre></div>

    </body>
</html>